{"ast":null,"code":"var _jsxFileName = \"/Users/sneha/Downloads/Local Farmer's Market App 2/farm-web/src/Signup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RegistrationForm = () => {\n  _s();\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Validate form inputs\n    if (!fullName || !email || !phoneNumber || !password || !confirmPassword) {\n      alert('Please fill in all fields.');\n      return;\n    }\n    if (password !== confirmPassword) {\n      alert('Passwords do not match.');\n      return;\n    }\n\n    // Make API request to sign up user\n    const apiUrl = 'http://localhost:3000/Signup';\n    fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        fullName,\n        email,\n        phoneNumber,\n        password\n      })\n    }).then(response => response.json()).then(data => {\n      if (data === 'Error') {\n        alert('An error occurred while signing up. Please try again.');\n      } else {\n        alert('You have successfully signed up!');\n        // Clear form inputs\n        setFullName('');\n        setEmail('');\n        setPhoneNumber('');\n        setPassword('');\n        setConfirmPassword('');\n      }\n    }).catch(error => {\n      console.error('Error:', error);\n      alert('An error occurred while signing up. Please try again.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: \"// Form inputs\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(RegistrationForm, \"OBYPlgGBSgCsH9KanG9ze01+Fsw=\");\n_c = RegistrationForm;\nvar _c;\n$RefreshReg$(_c, \"RegistrationForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","RegistrationForm","_s","fullName","setFullName","email","setEmail","phoneNumber","setPhoneNumber","password","setPassword","confirmPassword","setConfirmPassword","handleSubmit","e","preventDefault","alert","apiUrl","fetch","method","headers","body","JSON","stringify","then","response","json","data","catch","error","console","onSubmit","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sneha/Downloads/Local Farmer's Market App 2/farm-web/src/Signup.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nconst RegistrationForm = () => {\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [phoneNumber, setPhoneNumber] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Validate form inputs\n    if (!fullName ||!email ||!phoneNumber ||!password ||!confirmPassword) {\n      alert('Please fill in all fields.');\n      return;\n    }\n\n    if (password!== confirmPassword) {\n      alert('Passwords do not match.');\n      return;\n    }\n\n    // Make API request to sign up user\n    const apiUrl = 'http://localhost:3000/Signup';\n    fetch(apiUrl, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        fullName,\n        email,\n        phoneNumber,\n        password,\n      }),\n    })\n     .then((response) => response.json())\n     .then((data) => {\n        if (data === 'Error') {\n          alert('An error occurred while signing up. Please try again.');\n        } else {\n          alert('You have successfully signed up!');\n          // Clear form inputs\n          setFullName('');\n          setEmail('');\n          setPhoneNumber('');\n          setPassword('');\n          setConfirmPassword('');\n        }\n      })\n     .catch((error) => {\n        console.error('Error:', error);\n        alert('An error occurred while signing up. Please try again.');\n      });\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      // Form inputs\n    </form>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACnB,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1D,MAAMe,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI,CAACZ,QAAQ,IAAG,CAACE,KAAK,IAAG,CAACE,WAAW,IAAG,CAACE,QAAQ,IAAG,CAACE,eAAe,EAAE;MACpEK,KAAK,CAAC,4BAA4B,CAAC;MACnC;IACF;IAEA,IAAIP,QAAQ,KAAIE,eAAe,EAAE;MAC/BK,KAAK,CAAC,yBAAyB,CAAC;MAChC;IACF;;IAEA;IACA,MAAMC,MAAM,GAAG,8BAA8B;IAC7CC,KAAK,CAACD,MAAM,EAAE;MACZE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBpB,QAAQ;QACRE,KAAK;QACLE,WAAW;QACXE;MACF,CAAC;IACH,CAAC,CAAC,CACAe,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACb,IAAIA,IAAI,KAAK,OAAO,EAAE;QACpBX,KAAK,CAAC,uDAAuD,CAAC;MAChE,CAAC,MAAM;QACLA,KAAK,CAAC,kCAAkC,CAAC;QACzC;QACAZ,WAAW,CAAC,EAAE,CAAC;QACfE,QAAQ,CAAC,EAAE,CAAC;QACZE,cAAc,CAAC,EAAE,CAAC;QAClBE,WAAW,CAAC,EAAE,CAAC;QACfE,kBAAkB,CAAC,EAAE,CAAC;MACxB;IACF,CAAC,CAAC,CACFgB,KAAK,CAAEC,KAAK,IAAK;MACfC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9Bb,KAAK,CAAC,uDAAuD,CAAC;IAChE,CAAC,CAAC;EACN,CAAC;EAED,oBACEhB,OAAA;IAAM+B,QAAQ,EAAElB,YAAa;IAAAmB,QAAA,EAAC;EAE9B;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AAEX,CAAC;AAAAlC,EAAA,CA5DKD,gBAAgB;AAAAoC,EAAA,GAAhBpC,gBAAgB;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}